[pytest]
# 指定pytest执行时的命令行参数，-n 2 表示两个线程执行
# -s 表示打印输出，-v 表示详细输出，--alluredir 指定allure测试报告生成目录
# --clean-alluredir 表示删除之前生成的测试报告
# -n 2 表示使用2个线程执行，默认为1，即单线程执行
# --dist=loadfile 表示使用分布式执行，默认为loadscope，即按照文件执行
# --dist=loadscope 表示按照函数执行，默认为loadfile，即按照文件里面的函数执行
# --dist=each 表示每个线程都执行一次   这样生成的报告测试用例并没有对应的线程，都会默认为一份测试数据  解决方法，在conftest文件中修改配置
# --reruns=2  失败重试
# --reruns-delay=2 间隔时间      这里添加就是指所有测试用例失败就会重新执行，如果不想指定全部，就去测试用例中单独去设置

addopts = -sv --alluredir ./report/data --clean-alluredir -n 2 --dist=each

# 指的是要执行的目录，./表示当前目录
testpaths = ./testcases

# 指定pytest的测试用例文件路径、类名、函数名
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# 将日志文件打印在控制台
log_cli = true

# 在测试报告中显示日志的具体时间
log_format = %(asctime)s %(levelname)s [%(name)s] [%(filename)s (%(funcName)s:%(lineno)d) - %(message)s]
log_date_format = %Y-%m-%d %H:%M:%S